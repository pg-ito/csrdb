// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace csrdb
{

	public class JoinStream :BaseStream, IStream
	{
		public delegate  bool Opfunc(string a, string b);
		protected IStream input, inputJoin;
		protected string attribute, attributeJoin;
		protected Opfunc selector;

		protected List<Dictionary<string,string>> tuples;
		protected Dictionary<string,string> currentTuple;

		public JoinStream (IStream input, string attribute, IStream inputJoin, string attributeJoin, Opfunc selector)
		{
			this.input = input;
			this.attribute = attribute;
			this.inputJoin = inputJoin;
			this.attributeJoin = attributeJoin;
			this.selector = selector;
			this.index = 0;
			this.currentTuple = null;
			this.tuples = new List<Dictionary<string, string>>();
		}

		public Dictionary<string,string> Next(){
			if (this.tuples.Count <= this.index) {
				this.index = 0;
				this.currentTuple = null;
			}

			if (this.currentTuple == null) {
				if (this.input.HasNext()) {
					this.currentTuple = this.input.Next();
				}
				if (this.currentTuple == null) {
					return null;
				}
			}

			Dictionary<string, string> targetTuple = this.tuples[this.index++];

			if (this.selector(this.currentTuple[this.attribute], targetTuple[this.attributeJoin])) {
				Dictionary<string,string> result = new Dictionary<string,string>();
				foreach (KeyValuePair<string, string> col in this.currentTuple) {
					result.Add(col.Key,col.Value);
				}
				foreach (KeyValuePair<string, string> col in targetTuple) {
					result.Add(col.Key,col.Value);
				}
				return result;
			}
			if (this.HasNext()) {
				return this.Next();
			} else {
				return null;
			}
		}

		public bool HasNext(){
			if (this.tuples == null) {
				this.tuples = new List<Dictionary<string,string>>();
				while (this.inputJoin.HasNext()) {
					this.tuples.Add(this.inputJoin.Next());
				}
			}

			if (this.tuples.Count > this.index) {
				return true;
			}
			return this.input.HasNext();
		}

		override public void Close(){
			this.input.Close();
			this.inputJoin.Close();
		}
	}
}

